// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/detail/detail.proto

package detail

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DetailServiceClient is the client API for DetailService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DetailServiceClient interface {
	// Post detail for a restaurant
	PostDetail(ctx context.Context, in *PostDetailRequest, opts ...grpc.CallOption) (*PostDetailResponse, error)
	// Get restaurant details based on restaurant name
	GetDetail(ctx context.Context, in *GetDetailRequest, opts ...grpc.CallOption) (*GetDetailResponse, error)
}

type detailServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDetailServiceClient(cc grpc.ClientConnInterface) DetailServiceClient {
	return &detailServiceClient{cc}
}

func (c *detailServiceClient) PostDetail(ctx context.Context, in *PostDetailRequest, opts ...grpc.CallOption) (*PostDetailResponse, error) {
	out := new(PostDetailResponse)
	err := c.cc.Invoke(ctx, "/detail.DetailService/PostDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detailServiceClient) GetDetail(ctx context.Context, in *GetDetailRequest, opts ...grpc.CallOption) (*GetDetailResponse, error) {
	out := new(GetDetailResponse)
	err := c.cc.Invoke(ctx, "/detail.DetailService/GetDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DetailServiceServer is the server API for DetailService service.
// All implementations must embed UnimplementedDetailServiceServer
// for forward compatibility
type DetailServiceServer interface {
	// Post detail for a restaurant
	PostDetail(context.Context, *PostDetailRequest) (*PostDetailResponse, error)
	// Get restaurant details based on restaurant name
	GetDetail(context.Context, *GetDetailRequest) (*GetDetailResponse, error)
	mustEmbedUnimplementedDetailServiceServer()
}

// UnimplementedDetailServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDetailServiceServer struct {
}

func (UnimplementedDetailServiceServer) PostDetail(context.Context, *PostDetailRequest) (*PostDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostDetail not implemented")
}
func (UnimplementedDetailServiceServer) GetDetail(context.Context, *GetDetailRequest) (*GetDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetail not implemented")
}
func (UnimplementedDetailServiceServer) mustEmbedUnimplementedDetailServiceServer() {}

// UnsafeDetailServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DetailServiceServer will
// result in compilation errors.
type UnsafeDetailServiceServer interface {
	mustEmbedUnimplementedDetailServiceServer()
}

func RegisterDetailServiceServer(s grpc.ServiceRegistrar, srv DetailServiceServer) {
	s.RegisterService(&DetailService_ServiceDesc, srv)
}

func _DetailService_PostDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetailServiceServer).PostDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/detail.DetailService/PostDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetailServiceServer).PostDetail(ctx, req.(*PostDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DetailService_GetDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetailServiceServer).GetDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/detail.DetailService/GetDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetailServiceServer).GetDetail(ctx, req.(*GetDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DetailService_ServiceDesc is the grpc.ServiceDesc for DetailService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DetailService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "detail.DetailService",
	HandlerType: (*DetailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostDetail",
			Handler:    _DetailService_PostDetail_Handler,
		},
		{
			MethodName: "GetDetail",
			Handler:    _DetailService_GetDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/detail/detail.proto",
}
